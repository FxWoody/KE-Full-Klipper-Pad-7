# Ender-3V3 KE MOD for BTT Pad7
#MOD by FxWoody

[exclude_object]

[virtual_sdcard]
path: /home/saved/gcode_files
path: /home/biqu/printer_data/gcodes

[pause_resume]

[display_status]

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

#[gcode_macro CANCEL_PRINT]   #USE ONLY ON FACTORY SETUP
#description: Cancel the actual running print
#rename_existing: CANCEL_PRINT_BASE
#gcode:
    #TURN_OFF_HEATERS
    #{% if "xyz" in printer.toolhead.homed_axes %}
    #G91
    #G1 Z2
    #G90
    #{% else %}
    #{action_respond_info("Printer not homed")}
    #G28 X Y
    #{% endif %}
    #G1 F3000X0Y222
    #M104 S0
    #M140 S0
    #M107
    #M84
    #CANCEL_PRINT_BASE
    #FINISH_INIT

#[gcode_macro PRINT_CALIBRATION]   #USE ONLY ON FACTORY SETUP
# This part of the command is replaced by the application side without passing parameters
#gcode:
  #CX_PRINT_LEVELING_CALIBRATION

[gcode_macro _APPLY_NOZZLE_OFFSET]
description: Determine the global nozzle offset and apply
variable_hotend_temp: 250               # Target hotend temp (typically set by PRINT_START)
variable_probe_temp_delta: 80           # We probe at this amount less than the hotend temp
variable_reference_position: 5.0        # A safe Z position at which we'll apply the offset change
variable_offset_correction: 0.07        # Static Offset Correction
gcode:
    # Set our local working variables.  We treat everything as floats for these calculations
    {% set reference_position = reference_position|float %}
    {% set offset_correction  = offset_correction|float %}

    # Determine the rest of our working variables
    {% set z_home_x = printer.configfile.settings.beacon.home_xy_position[0] %}
    {% set z_home_y = printer.configfile.settings.beacon.home_xy_position[1] %}
    {% set z_speed  = printer.configfile.settings['stepper_z'].homing_speed|float * 60 %}
    
    {% set target_position = (reference_position + offset_correction)|float %}

    # Report to the console what we've determined
    { action_respond_info("Applying Z offset adjustment for hotend temperature of %.1fÂ°C" % hotend_temp|float) }
    { action_respond_info("  Offset Correction    = %.3f" % (offset_correction)|float) }
    { action_respond_info("  Reference Position   = %.1f" % (reference_position)|float) }
    { action_respond_info("  Target Position      = %.6f" % (target_position)|float) }

    SET_GCODE_OFFSET Z=0                            # Clear any pre-existing Gcode offsets
    G1 Z{target_position} F{z_speed}                # Move Z to determined target position
    G1 X{z_home_x} Y{z_home_y} F7200                # Move X/Y to Z homing position 
    M400                                            # Wait for prior gcode-commands to finish
    SET_KINEMATIC_POSITION Z={reference_position}   # Set target position to be the reference position
    G1 Z{reference_position} F600                   # Move Z to reference position.  Ideally the bed should not move
    M400
  
[gcode_macro APPLY_FILAMENT_OFFSET]
description: Apply a Z offset adjustment for a specific filament
gcode:
    {% set filament_z = params.Z|default(0)|float %}
    { action_respond_info("Setting Filament Offset to %.3fmm" % (filament_z)) }
    SET_GCODE_OFFSET Z_ADJUST={filament_z}

[gcode_macro APPLY_BED_TYPE_OFFSET]
description: Apply a Z offset adjustment for a specific bed type
gcode:
    {% set bed_type = params.BED_TYPE|default("default")|string|lower %}
    { action_respond_info("Bed Type Is:   %s" % bed_type) }
    {% if "textured" in bed_type %}
        {% set offset = 0.0|float %}
    {% elif "cool plate" in bed_type %}
        {% set offset = 0.025|float %}
    {% else %}
        {% set offset = 0.0|float %}       
    {% endif %}
    { action_respond_info("Bed Offset Is: %.3f" % offset) }
    SET_GCODE_OFFSET Z_ADJUST={offset}    

[gcode_macro zoffset]
description: Apply baseline Z offset which is always zero for Beacon Contact
gcode:
    SET_GCODE_OFFSET Z=0           # Apply a zero gcode_offset

# Development test
[gcode_macro test_zoffset]
description: Debugging test to compare the probe's contact and proximity Z Offset values
gcode:
    G28 X Y
    get_zoffset
    M400
    BEACON_OFFSET_COMPARE
    G4 P5000
    G1 Z10 F600  

[gcode_macro get_zoffset]
description: Homes nozzle against build plate and applies global z offset
gcode:
    _FIND_Z_EQUALS_ZERO
    _APPLY_NOZZLE_OFFSET    

[gcode_macro save_zoffset]
description: Use APPLY_FILAMENT_OFFSET instead
gcode:
    { action_respond_info("Use APPLY_FILAMENT_OFFSET instead") }

[gcode_macro set_zoffset]
description: Apply baseline Z offset which is always zero for Beacon Contact      
gcode: 
    SET_GCODE_OFFSET Z=0            # Apply a zero gcode_offset
    
[gcode_macro FIRST_FLOOR_PAUSE_POSITION]
gcode:
  {% set extruder_temp = printer.custom_macro.g28_ext_temp %}
  M104 S{extruder_temp}
  {% set y_park = printer.toolhead.axis_maximum.y/2 %}
  {% set x_park = printer['gcode_macro PRINTER_PARAM'].max_x_position|float %}
  G90
  G1 Z2 F600
  G1 X{x_park} Y{y_park} F6000
  G1 Z0.2 F600

[gcode_macro FIRST_FLOOR_RESUME]
description: Resume the first floor print
gcode:
    ##### read E from pause macro #####
  {% set E = printer["gcode_macro FIRST_FLOOR_PAUSE"].extrude|float + 1.0 %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY) %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro FIRST_FLOOR_PAUSE]
description: Pause the first floor print
# change this if you need more or less extrusion
variable_extrude: 2.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro FIRST_FLOOR_PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set y_park = printer.toolhead.axis_maximum.y/2 %}
  {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer["gcode_macro PRINTER_PARAM"].max_z_position|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_safe = 0.0 %}
  {% if act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% elif act_z < max_z %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=z_safe_pause VALUE={z_safe|float}
  PAUSE_BASE
  G91
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-1.0 F180
      G1 E-{E} F4000
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    G1 Z{z_safe} F600
    G90
    G1 X{x_park} Y{y_park} F30000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro PRINTER_PARAM]
variable_z_safe_pause: 0.0
variable_max_x_position: 220.0
variable_max_y_position: 220.0
variable_max_z_position: 240.0
variable_fans: 3
variable_auto_g29: 0
variable_default_bed_temp: 60
variable_default_extruder_temp: 220
variable_g28_extruder_temp: 140
variable_print_calibration: 0
variable_fan0_min: 140
variable_hotend_temp: 240
gcode:

[gcode_macro STRUCTURE_PARAM]
variable_bed_length: 220
variable_bed_width: 220
variable_bed_hight: 240
variable_laser_x_offset: 45.0
variable_laser_y_offset: -8.0
variable_laser_z_offset: 3.0
variable_cali_x_offset: 204.0
variable_cali_y_offset: 14.0
variable_cali_z_offset: 3.5
gcode:


[gcode_macro M900]
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}

[gcode_arcs] #Print circle
resolution: 1.0

[gcode_macro M204]     #set-acceleration
rename_existing: M204.1
gcode:
  # {% if printer['gcode_macro Qmode'].flag|int == 0 %}
  {% set get_params = "" %}
  {% if 'S' in params|upper %}
    {% set get_params = (get_params + ' ' + 'S' + params.S) %}
  {% endif %}
  {% if 'P' in params|upper %}
    {% set get_params = (get_params + ' ' + 'P' + params.P) %}
  {% endif %}
  {% if 'T' in params|upper %}
    {% set get_params = (get_params + ' ' + 'T' + params.T) %}
  {% endif %}
  M204.1 {get_params}
  # {% endif %}

[gcode_macro M205]
gcode:
  {% if 'X' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
  {% elif 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
  {% endif %}

[gcode_macro nozzle_cleaner]  
gcode:
  M104 S160                                #make sure nozzle is hot enough to clean
  M118 Warming Up Nozzle
  M400
   
  G0 X-10 Y10 Z3                             # Move nozzle to cleaning area
  G4 P30000
  G1 X-10 Y30 Z3 F1300                       # Wipe the nozzle at a slower speed (optional)
  G1 X-10 Y10 Z3 F1300
  G1 X-8 Y20 Z3 F1300
  G1 X-10 Y10 Z3 F1300
  G1 X-8 Y30 Z3 F1300
  G1 X-10 Y10 Z3 F1300
  G2 I0.8 J0.8 F1600
  G2 I0.8 J0.8 F1600
  G2 I0.8 J0.8 F1600
  G0 X110 Y110 F3000                          # Return to home position
  
#######################################################
### Excute when start printing, prior to gcode file ###
#######################################################
[gcode_macro PRINT_START]
description: Start Printing
gcode:
  {% set bedtemp = params.BED|int %}
  {% set hotendtemp = params.HOTEND|int %}
  SET_GCODE_VARIABLE MACRO=_APPLY_NOZZLE_OFFSET VARIABLE=hotend_temp VALUE={hotendtemp}

  _CG28
  M140 S{bedtemp}                         # Initiate Print Bed Warmup as early as possible
  M104 S140                            # Make sure hotend is set before cleaning

  nozzle_cleaner                          #clean nozzle before print
  M400                                    # Wait for all prior G-code commands to be processed before G28
   
  SET_GCODE_OFFSET Z=0                    # Reset any applied Z_offset
  G28 Z METHOD=CONTACT CALIBRATE=1        # Home Z axis, and calibrate beacon    
  M190 S{bedtemp}                         # Wait for print bed to reach target temperature
  G4 P10000                               # Wait 10 seconds for bed temps to stabilise
   
  G29                                     # Perform Z-offset, and bed meshing measurements
  Smart_Park                              #KAMP nozzle park ready for print

  M109 S{hotendtemp}                      # Commence hotend warmup
  M204 S8000                              # Set velocity limits
  M83                                     # Set E-axis to relative mode
  SET_PRINT_STATS_INFO CURRENT_LAYER=1    # Set current layer to 1

  G4 P2000

[gcode_macro G31]
gcode:
  SET_GCODE_VARIABLE MACRO=G29 VARIABLE=ke VALUE=1

[gcode_macro G32]
gcode:
  SET_GCODE_VARIABLE MACRO=G29 VARIABLE=ke VALUE=0     
    
[gcode_macro G29]
variable_ke:1
gcode:
  # M204 S5000
  # G90
  # M104 S140
  # M107
  # SET_GCODE_OFFSET Z=0
  # _FIND_Z_EQUALS_ZERO                                            # The user must make sure that nothing else homes Z after this call
  #G28 Z METHOD=CONTACT CALIBRATE=1 
  {% if ke|int==1 %}
      BED_MESH_CALIBRATE RUNS=2 PROFILE=kamp
      BED_MESH_PROFILE LOAD=kamp
      SAVE_VARIABLE VARIABLE=profile_name VALUE='"kamp"'
  {% else %}
      BED_MESH_CALIBRATE RUNS=2 PROFILE=default
      BED_MESH_PROFILE LOAD=default
      SAVE_VARIABLE VARIABLE=profile_name VALUE='"default"'
      SET_GCODE_VARIABLE MACRO=G29 VARIABLE=k VALUE=1            # Reactivate KAMP/Adaptive mode for next time
  {% endif %}

[gcode_macro INPUTSHAPER_X]
gcode:
  M84
  G90
  G28
  SHAPER_CALIBRATE AXIS=x
  CXSAVE_CONFIG 

[gcode_macro INPUTSHAPER_Y]
gcode:
  M84
  G90
  G28
  SHAPER_CALIBRATE AXIS=y
  CXSAVE_CONFIG 

[gcode_macro INPUTSHAPER]
gcode:
  G90
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  {% if 'X' in params.AXES|upper %}
    SHAPER_CALIBRATE AXIS=X
  {% elif 'Y' in params.AXES|upper %}
    SHAPER_CALIBRATE AXIS=Y
  {% else %}
    SHAPER_CALIBRATE
  {% endif %}
  CXSAVE_CONFIG

  
[gcode_macro AUTOTUNE_SHAPERS]
variable_autotune_shapers: 'mzv'
gcode:

### new offset ###
[gcode_macro save_zoffset]
description: Use APPLY_FILAMENT_OFFSET instead
gcode:
    { action_respond_info("Use APPLY_FILAMENT_OFFSET instead") }
  
[gcode_macro Z_OFFSET_TEST]
gcode:
  G28
  Z_OFFSET_CALIBRATION
  CXSAVE_CONFIG 

[gcode_macro ZZ_OFFSET_TEST]
gcode:
  G28
  Z_OFFSET_AUTO
  CXSAVE_CONFIG 

[gcode_macro Z_COMPENSATE_TEST]
gcode:
  G28
  CRTENSE_NOZZLE_CLEAR
  Z_OFFSET_CALIBRATION

[gcode_macro M106]
gcode:
  {% set fan = 0 %}
  {% set value = 255 %}
  {% if params.S is defined %}
    {% set tmp = params.S|int %}
    {% if tmp <= 255 %}
      {% set value = tmp %}
    {% endif %}
  {% endif %}
  {% if params.P is defined %}
    {% if params.P|int == 0 %}
        {% set value = printer["gcode_macro PRINTER_PARAM"].fan0_min + (255 - printer["gcode_macro PRINTER_PARAM"].fan0_min) / 255 * tmp %}
        {% if tmp < 1 %}
          {% set value = tmp %}
        {% endif %}
        SET_PIN PIN=fan0 VALUE={value}
    {% endif %}
  {% else %}
    {% set value = printer["gcode_macro PRINTER_PARAM"].fan0_min + (255 - printer["gcode_macro PRINTER_PARAM"].fan0_min) / 255 * tmp %}
    {% if tmp < 1 %}
      {% set value = tmp %}
    {% endif %}
    SET_PIN PIN=fan0 VALUE={value}
  {% endif %}

[gcode_macro M107]
gcode:
  {% if params.P is defined %}
    SET_PIN PIN=fan0 VALUE=0
  {% else %}
    SET_PIN PIN=fan0 VALUE=0
    # SET_PIN PIN=fan2 VALUE=0
  {% endif %}

#[gcode_macro LOAD_MATERIAL]  #USE ONLY ON FACTORY SETUP
#gcode:
  #SAVE_GCODE_STATE NAME=myMoveState
  #M109 S{printer.custom_macro.default_extruder_temp}
  #G91
  #G1 E150 F180
  #RESTORE_GCODE_STATE NAME=myMoveState

[gcode_macro LOAD_FILAMENT]
gcode:
    G28
    G1 Z25
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity * 60 %}
    {% if printer['gcode_macro PRINTER_PARAM'].hotend_temp|int != 0 %}
      {% if printer['gcode_macro PRINTER_PARAM'].hotend_temp|int > printer.extruder.temperature %}
        M109 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
      {% else %}
        M104 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=hotend_temp VALUE=0
    {% endif %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E350 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state
  
[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    G28
    G1 Z25
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    {% if printer['gcode_macro PRINTER_PARAM'].hotend_temp|int != 0 %}
      {% if printer['gcode_macro PRINTER_PARAM'].hotend_temp|int > printer.extruder.temperature %}
        M109 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
      {% else %}
        M104 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=hotend_temp VALUE=0
    {% endif %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state
    
#[gcode_macro QUIT_MATERIAL]   #USE ONLY ON FACTORY SETUP
#gcode:
  #SAVE_GCODE_STATE NAME=myMoveState
  #M109 S{printer.custom_macro.default_extruder_temp}
  #G91
  #G1 E20 F180
  #G1 E-30 F180
  #G1 E-50 F2000
  #RESTORE_GCODE_STATE NAME=myMoveState

[gcode_macro M600]
gcode:
  PAUSE
  {% set act_e = printer.toolhead.position.e|float %}
  G91
  G1 E20 F180
  G1 E-30 F180
  G1 E-50 F2000
  G90
  G92 E{act_e}

[gcode_macro FINISH_INIT]
gcode:
  {% set extruder = printer.configfile.settings['extruder'] %}
  {% set printer = printer.configfile.settings['printer'] %}
  SET_PRESSURE_ADVANCE ADVANCE={extruder.pressure_advance}
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.max_accel_to_decel}
  #Corner speedï¼5mm/s
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5
  #Accelerationï¼5000mm/sÂ²
  M204 S5000
  #Decelerationï¼5000mm/sÂ²
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL=5000
  #Movement Rateï¼100%
  M220 S100
  #Set Feedrate Percentageï¼100%
  M221 S100

[gcode_macro _BEACON_HOME_PRE_X]
gcode:
    {% set RUN_CURRENT = printer.configfile.settings['tmc2208 stepper_x'].run_current|float %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT * 0.6}

[gcode_macro _BEACON_HOME_POST_X]
gcode:
    {% set RUN_CURRENT = printer.configfile.settings['tmc2208 stepper_x'].run_current|float %}
    # Move away
    G1 X0 F9000
    M400
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT}

[gcode_macro _BEACON_HOME_PRE_Y]
gcode:
    {% set RUN_CURRENT = printer.configfile.settings['tmc2208 stepper_y'].run_current|float %}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT * 0.8}       

[gcode_macro _BEACON_HOME_POST_Y]
gcode:
    {% set RUN_CURRENT = printer.configfile.settings['tmc2208 stepper_y'].run_current|float %}
    # Move away
    G1 Y0 F9000
    M400
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT}

[gcode_macro _BEACON_CONTACT_PRE_Z]
gcode:

[gcode_macro _BEACON_CONTACT_POST_Z]
gcode:
    G1 Z3 F600              # Ensure the bed is moved away from the nozzle
    M400  

#### BED SCREWS PROBE ####

[gcode_macro SFL]
description: Get zoffset at front-left bed adjustment screw position
gcode:
    {% set screw_pos_x = printer.configfile.settings.bed_screws.screw1[0] %}
    {% set screw_pos_y = printer.configfile.settings.bed_screws.screw1[1] %}
    {% set beacon_off_x = printer.configfile.settings.beacon.x_offset %}
    {% set beacon_off_y = printer.configfile.settings.beacon.y_offset %}
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle
    G1 X{screw_pos_x - beacon_off_x + 10} Y{screw_pos_y - beacon_off_y + 10} F6000
    PROBE PROBE_METHOD=proximity
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle

[gcode_macro SFR]
description: Get zoffset at front-right bed adjustment screw position
gcode:
    {% set screw_pos_x = printer.configfile.settings.bed_screws.screw2[0] %}
    {% set screw_pos_y = printer.configfile.settings.bed_screws.screw2[1] %}
    {% set beacon_off_x = printer.configfile.settings.beacon.x_offset %}
    {% set beacon_off_y = printer.configfile.settings.beacon.y_offset %}
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle
    G1 X{screw_pos_x - beacon_off_x -10} Y{screw_pos_y - beacon_off_y + 10} F6000
    PROBE PROBE_METHOD=proximity
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle

[gcode_macro SBR]
description: Get zoffset at back-right bed adjustment screw position
gcode:
    {% set screw_pos_x = printer.configfile.settings.bed_screws.screw3[0] %}
    {% set screw_pos_y = printer.configfile.settings.bed_screws.screw3[1] %}
    {% set beacon_off_x = printer.configfile.settings.beacon.x_offset %}
    {% set beacon_off_y = printer.configfile.settings.beacon.y_offset %}
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle
    G1 X{screw_pos_x - beacon_off_x - 5} Y{screw_pos_y - beacon_off_y - 5} F6000
    PROBE PROBE_METHOD=proximity
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle

[gcode_macro SBL]
description: Get zoffset at back-left bed adjustment screw position
gcode:
    {% set screw_pos_x = printer.configfile.settings.bed_screws.screw4[0] %}
    {% set screw_pos_y = printer.configfile.settings.bed_screws.screw4[1] %}
    {% set beacon_off_x = printer.configfile.settings.beacon.x_offset %}
    {% set beacon_off_y = printer.configfile.settings.beacon.y_offset %}
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle
    G1 X{screw_pos_x - beacon_off_x + 5} Y{screw_pos_y - beacon_off_y - 5} F6000
    PROBE PROBE_METHOD=proximity
    G1 Z3 F600      # Ensure the bed is moved away from the nozzle
  

